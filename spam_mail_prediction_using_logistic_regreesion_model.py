# -*- coding: utf-8 -*-
"""Spam Mail Prediction Using Logistic Regreesion model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OjYZoz2qAxGXT4v-YdWxQGbPqb6RhB82

Inporting dependecies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Colleation & preprocessing"""

# Loading The data from cssv file to a pandas data frame
raw_mail_data = pd.read_csv('/content/mail_data.csv')

print(raw_mail_data)

# replace null value to null string
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

# printing the first five row of the data frame
mail_data.head(10)

#cheaking number of rows and colums
mail_data.shape

"""Label Encoding """

# label spam mail as 0; and ham mail as 1;
mail_data.loc[mail_data['Category'] == 'spam','Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham','Category',] = 1

mail_data.head(10)

"""spam repersneted by 0 and ham as 1"""

#seperating the data as text and label

X = mail_data['Message']

Y = mail_data['Category']

print(X)

print(Y)

"""Most imp set (Split Training data and testing data)"""

X_train, X_test, Y_train, Y_test = train_test_split( X, Y, test_size=0.2, random_state=3 )

print(X.shape)
print(X_train.shape)
print(X_test.shape)

"""Feature Extraction ( Convert data into numerical value )"""

# transform the text data to feature vectors that can be used as input to the Logistic regression model

feature_extraction = TfidfVectorizer(min_df = 1, stop_words='english', lowercase=True)

X_train_features = feature_extraction.fit_transform(X_train)

X_test_features = feature_extraction.transform(X_test)


# Convert Y_Train and  Y_Test value to string

Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

print(X_train_features)

"""Training model

Logistic Regression
"""

model = LogisticRegression()

#training the logistic regression model

model.fit(X_train_features,Y_train)

"""Evaluation trained model"""

# Prediction on training data


prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)

print('Accuracy On Training Data :',accuracy_on_training_data)

# Prediction on test data


prediction_on_test_data = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test, prediction_on_test_data)

print('Accuracy On test Data :',accuracy_on_test_data)

"""Building a predictive system"""

input_mail = [
    "Nah I don't think he goes to usf, he lives around here though"
]

# Convert mail text into featurevalue

input_main_features =  feature_extraction.transform(input_mail)

# Making Presictions

prediction = model.predict(input_main_features)

print(prediction)

if prediction[0] == 1 :
  print("Legit mail")
else:
  print("Spam Mail")

